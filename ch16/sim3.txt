The desired result can be achieved with the following settings:

    $ segmentation.py --b0 0 --b1 16 --l0 2 --l1 2 \
                      -A 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 -a 16 -c -p 128 
    ARG seed 0
    ARG address space size 16
    ARG phys mem size 128

    Segment register information:

      Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
      Segment 0 limit                  : 2

      Segment 1 base  (grows negative) : 0x00000010 (decimal 16)
      Segment 1 limit                  : 2

    Virtual Address Trace
      VA  0: 0x00000000 (decimal:    0) --> VALID in SEG0: 0x00000000 (decimal:    0)
      VA  1: 0x00000001 (decimal:    1) --> VALID in SEG0: 0x00000001 (decimal:    1)
      VA  2: 0x00000002 (decimal:    2) --> SEGMENTATION VIOLATION (SEG0)
      VA  3: 0x00000003 (decimal:    3) --> SEGMENTATION VIOLATION (SEG0)
      VA  4: 0x00000004 (decimal:    4) --> SEGMENTATION VIOLATION (SEG0)
      VA  5: 0x00000005 (decimal:    5) --> SEGMENTATION VIOLATION (SEG0)
      VA  6: 0x00000006 (decimal:    6) --> SEGMENTATION VIOLATION (SEG0)
      VA  7: 0x00000007 (decimal:    7) --> SEGMENTATION VIOLATION (SEG0)
      VA  8: 0x00000008 (decimal:    8) --> SEGMENTATION VIOLATION (SEG1)
      VA  9: 0x00000009 (decimal:    9) --> SEGMENTATION VIOLATION (SEG1)
      VA 10: 0x0000000a (decimal:   10) --> SEGMENTATION VIOLATION (SEG1)
      VA 11: 0x0000000b (decimal:   11) --> SEGMENTATION VIOLATION (SEG1)
      VA 12: 0x0000000c (decimal:   12) --> SEGMENTATION VIOLATION (SEG1)
      VA 13: 0x0000000d (decimal:   13) --> SEGMENTATION VIOLATION (SEG1)
      VA 14: 0x0000000e (decimal:   14) --> VALID in SEG1: 0x0000000e (decimal:   14)
      VA 15: 0x0000000f (decimal:   15) --> VALID in SEG1: 0x0000000f (decimal:   15)
