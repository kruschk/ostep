From the size of the address space, we know that

    0 <= virtual < 128 = 2^7,

however, other constraints also apply. Virtual addresses with the MSB (bit #6)
set to 0 refer to segment 0, while the remaining LSBs specify an offset within
this segment. The legal offsets in segment 0 are therefore

    0 <= offset0 < 2^6 = 64.

The bounds register restricts this further. Since it is set to 20, we have

    0 <= offset0 = virtual0 < 20.

Similarly, virtual addresses with the MSB (bit #6) set to 1 refer to segment
1, with the remaining LSBs specifying an offset within this segment. The legal
offsets within segment 1 are therefore

    0 <= offset1 < 2^6 = 64,

and the virtual address relates to this offset as follows:

    virtual1 = offset1 + 2^6 = offset1 + 64.

Since the stack grows in the negative direction, we must convert this offset
into another, negative offset from the top of the stack using the following
transformation,

    offset1' = offset1 - 64,

so

    0 - 64 <= offset1 - 64 < 64 - 64
    -64 <= offset1' < 0.

The limit register further restricts this inequality. Since |offset1'| <= 20,
i.e., -20 <= offset1' <= 20, we can say

    -20 <= offset1' < 0.

Converting this back to offset1:

    -20 + 64 <= offset1' + 64 < 64
    44 <= offset1 < 64

Finally, converting offset1 to a virtual address:

    44 + 64 <= offset1 + 64 < 64 + 64
    108 <= virtual1 < 128

In conclusion, 0 <= virtual0 < 20 and 108 <= virtual1 < 128, and virtual
addresses in the range 20 <= virtual < 108 are therefore illegal.

To confirm this result, one might simply run the simulator on every address in
the address space and compare the results with the above inequalities, as
follows:

    $ ./segmentation.py -A $(echo {0..128} | sed - e 's/ /,/g') -B 512 -L 20 \
                        -a 128 -b 0 -c -l 20 -p 512 -s 0
    ARG seed 0
    ARG address space size 128
    ARG phys mem size 512

    Segment register information:

      Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
      Segment 0 limit                  : 20

      Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
      Segment 1 limit                  : 20

    Virtual Address Trace
      VA  0: 0x00000000 (decimal:    0) --> VALID in SEG0: 0x00000000 (decimal:    0)
      VA  1: 0x00000001 (decimal:    1) --> VALID in SEG0: 0x00000001 (decimal:    1)
      VA  2: 0x00000002 (decimal:    2) --> VALID in SEG0: 0x00000002 (decimal:    2)
      VA  3: 0x00000003 (decimal:    3) --> VALID in SEG0: 0x00000003 (decimal:    3)
      VA  4: 0x00000004 (decimal:    4) --> VALID in SEG0: 0x00000004 (decimal:    4)
      VA  5: 0x00000005 (decimal:    5) --> VALID in SEG0: 0x00000005 (decimal:    5)
      VA  6: 0x00000006 (decimal:    6) --> VALID in SEG0: 0x00000006 (decimal:    6)
      VA  7: 0x00000007 (decimal:    7) --> VALID in SEG0: 0x00000007 (decimal:    7)
      VA  8: 0x00000008 (decimal:    8) --> VALID in SEG0: 0x00000008 (decimal:    8)
      VA  9: 0x00000009 (decimal:    9) --> VALID in SEG0: 0x00000009 (decimal:    9)
      VA 10: 0x0000000a (decimal:   10) --> VALID in SEG0: 0x0000000a (decimal:   10)
      VA 11: 0x0000000b (decimal:   11) --> VALID in SEG0: 0x0000000b (decimal:   11)
      VA 12: 0x0000000c (decimal:   12) --> VALID in SEG0: 0x0000000c (decimal:   12)
      VA 13: 0x0000000d (decimal:   13) --> VALID in SEG0: 0x0000000d (decimal:   13)
      VA 14: 0x0000000e (decimal:   14) --> VALID in SEG0: 0x0000000e (decimal:   14)
      VA 15: 0x0000000f (decimal:   15) --> VALID in SEG0: 0x0000000f (decimal:   15)
      VA 16: 0x00000010 (decimal:   16) --> VALID in SEG0: 0x00000010 (decimal:   16)
      VA 17: 0x00000011 (decimal:   17) --> VALID in SEG0: 0x00000011 (decimal:   17)
      VA 18: 0x00000012 (decimal:   18) --> VALID in SEG0: 0x00000012 (decimal:   18)
      VA 19: 0x00000013 (decimal:   19) --> VALID in SEG0: 0x00000013 (decimal:   19)
      VA 20: 0x00000014 (decimal:   20) --> SEGMENTATION VIOLATION (SEG0)
      VA 21: 0x00000015 (decimal:   21) --> SEGMENTATION VIOLATION (SEG0)
      VA 22: 0x00000016 (decimal:   22) --> SEGMENTATION VIOLATION (SEG0)
      VA 23: 0x00000017 (decimal:   23) --> SEGMENTATION VIOLATION (SEG0)
      VA 24: 0x00000018 (decimal:   24) --> SEGMENTATION VIOLATION (SEG0)
      VA 25: 0x00000019 (decimal:   25) --> SEGMENTATION VIOLATION (SEG0)
      VA 26: 0x0000001a (decimal:   26) --> SEGMENTATION VIOLATION (SEG0)
      VA 27: 0x0000001b (decimal:   27) --> SEGMENTATION VIOLATION (SEG0)
      VA 28: 0x0000001c (decimal:   28) --> SEGMENTATION VIOLATION (SEG0)
      VA 29: 0x0000001d (decimal:   29) --> SEGMENTATION VIOLATION (SEG0)
      VA 30: 0x0000001e (decimal:   30) --> SEGMENTATION VIOLATION (SEG0)
      VA 31: 0x0000001f (decimal:   31) --> SEGMENTATION VIOLATION (SEG0)
      VA 32: 0x00000020 (decimal:   32) --> SEGMENTATION VIOLATION (SEG0)
      VA 33: 0x00000021 (decimal:   33) --> SEGMENTATION VIOLATION (SEG0)
      VA 34: 0x00000022 (decimal:   34) --> SEGMENTATION VIOLATION (SEG0)
      VA 35: 0x00000023 (decimal:   35) --> SEGMENTATION VIOLATION (SEG0)
      VA 36: 0x00000024 (decimal:   36) --> SEGMENTATION VIOLATION (SEG0)
      VA 37: 0x00000025 (decimal:   37) --> SEGMENTATION VIOLATION (SEG0)
      VA 38: 0x00000026 (decimal:   38) --> SEGMENTATION VIOLATION (SEG0)
      VA 39: 0x00000027 (decimal:   39) --> SEGMENTATION VIOLATION (SEG0)
      VA 40: 0x00000028 (decimal:   40) --> SEGMENTATION VIOLATION (SEG0)
      VA 41: 0x00000029 (decimal:   41) --> SEGMENTATION VIOLATION (SEG0)
      VA 42: 0x0000002a (decimal:   42) --> SEGMENTATION VIOLATION (SEG0)
      VA 43: 0x0000002b (decimal:   43) --> SEGMENTATION VIOLATION (SEG0)
      VA 44: 0x0000002c (decimal:   44) --> SEGMENTATION VIOLATION (SEG0)
      VA 45: 0x0000002d (decimal:   45) --> SEGMENTATION VIOLATION (SEG0)
      VA 46: 0x0000002e (decimal:   46) --> SEGMENTATION VIOLATION (SEG0)
      VA 47: 0x0000002f (decimal:   47) --> SEGMENTATION VIOLATION (SEG0)
      VA 48: 0x00000030 (decimal:   48) --> SEGMENTATION VIOLATION (SEG0)
      VA 49: 0x00000031 (decimal:   49) --> SEGMENTATION VIOLATION (SEG0)
      VA 50: 0x00000032 (decimal:   50) --> SEGMENTATION VIOLATION (SEG0)
      VA 51: 0x00000033 (decimal:   51) --> SEGMENTATION VIOLATION (SEG0)
      VA 52: 0x00000034 (decimal:   52) --> SEGMENTATION VIOLATION (SEG0)
      VA 53: 0x00000035 (decimal:   53) --> SEGMENTATION VIOLATION (SEG0)
      VA 54: 0x00000036 (decimal:   54) --> SEGMENTATION VIOLATION (SEG0)
      VA 55: 0x00000037 (decimal:   55) --> SEGMENTATION VIOLATION (SEG0)
      VA 56: 0x00000038 (decimal:   56) --> SEGMENTATION VIOLATION (SEG0)
      VA 57: 0x00000039 (decimal:   57) --> SEGMENTATION VIOLATION (SEG0)
      VA 58: 0x0000003a (decimal:   58) --> SEGMENTATION VIOLATION (SEG0)
      VA 59: 0x0000003b (decimal:   59) --> SEGMENTATION VIOLATION (SEG0)
      VA 60: 0x0000003c (decimal:   60) --> SEGMENTATION VIOLATION (SEG0)
      VA 61: 0x0000003d (decimal:   61) --> SEGMENTATION VIOLATION (SEG0)
      VA 62: 0x0000003e (decimal:   62) --> SEGMENTATION VIOLATION (SEG0)
      VA 63: 0x0000003f (decimal:   63) --> SEGMENTATION VIOLATION (SEG0)
      VA 64: 0x00000040 (decimal:   64) --> SEGMENTATION VIOLATION (SEG1)
      VA 65: 0x00000041 (decimal:   65) --> SEGMENTATION VIOLATION (SEG1)
      VA 66: 0x00000042 (decimal:   66) --> SEGMENTATION VIOLATION (SEG1)
      VA 67: 0x00000043 (decimal:   67) --> SEGMENTATION VIOLATION (SEG1)
      VA 68: 0x00000044 (decimal:   68) --> SEGMENTATION VIOLATION (SEG1)
      VA 69: 0x00000045 (decimal:   69) --> SEGMENTATION VIOLATION (SEG1)
      VA 70: 0x00000046 (decimal:   70) --> SEGMENTATION VIOLATION (SEG1)
      VA 71: 0x00000047 (decimal:   71) --> SEGMENTATION VIOLATION (SEG1)
      VA 72: 0x00000048 (decimal:   72) --> SEGMENTATION VIOLATION (SEG1)
      VA 73: 0x00000049 (decimal:   73) --> SEGMENTATION VIOLATION (SEG1)
      VA 74: 0x0000004a (decimal:   74) --> SEGMENTATION VIOLATION (SEG1)
      VA 75: 0x0000004b (decimal:   75) --> SEGMENTATION VIOLATION (SEG1)
      VA 76: 0x0000004c (decimal:   76) --> SEGMENTATION VIOLATION (SEG1)
      VA 77: 0x0000004d (decimal:   77) --> SEGMENTATION VIOLATION (SEG1)
      VA 78: 0x0000004e (decimal:   78) --> SEGMENTATION VIOLATION (SEG1)
      VA 79: 0x0000004f (decimal:   79) --> SEGMENTATION VIOLATION (SEG1)
      VA 80: 0x00000050 (decimal:   80) --> SEGMENTATION VIOLATION (SEG1)
      VA 81: 0x00000051 (decimal:   81) --> SEGMENTATION VIOLATION (SEG1)
      VA 82: 0x00000052 (decimal:   82) --> SEGMENTATION VIOLATION (SEG1)
      VA 83: 0x00000053 (decimal:   83) --> SEGMENTATION VIOLATION (SEG1)
      VA 84: 0x00000054 (decimal:   84) --> SEGMENTATION VIOLATION (SEG1)
      VA 85: 0x00000055 (decimal:   85) --> SEGMENTATION VIOLATION (SEG1)
      VA 86: 0x00000056 (decimal:   86) --> SEGMENTATION VIOLATION (SEG1)
      VA 87: 0x00000057 (decimal:   87) --> SEGMENTATION VIOLATION (SEG1)
      VA 88: 0x00000058 (decimal:   88) --> SEGMENTATION VIOLATION (SEG1)
      VA 89: 0x00000059 (decimal:   89) --> SEGMENTATION VIOLATION (SEG1)
      VA 90: 0x0000005a (decimal:   90) --> SEGMENTATION VIOLATION (SEG1)
      VA 91: 0x0000005b (decimal:   91) --> SEGMENTATION VIOLATION (SEG1)
      VA 92: 0x0000005c (decimal:   92) --> SEGMENTATION VIOLATION (SEG1)
      VA 93: 0x0000005d (decimal:   93) --> SEGMENTATION VIOLATION (SEG1)
      VA 94: 0x0000005e (decimal:   94) --> SEGMENTATION VIOLATION (SEG1)
      VA 95: 0x0000005f (decimal:   95) --> SEGMENTATION VIOLATION (SEG1)
      VA 96: 0x00000060 (decimal:   96) --> SEGMENTATION VIOLATION (SEG1)
      VA 97: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
      VA 98: 0x00000062 (decimal:   98) --> SEGMENTATION VIOLATION (SEG1)
      VA 99: 0x00000063 (decimal:   99) --> SEGMENTATION VIOLATION (SEG1)
      VA 100: 0x00000064 (decimal:  100) --> SEGMENTATION VIOLATION (SEG1)
      VA 101: 0x00000065 (decimal:  101) --> SEGMENTATION VIOLATION (SEG1)
      VA 102: 0x00000066 (decimal:  102) --> SEGMENTATION VIOLATION (SEG1)
      VA 103: 0x00000067 (decimal:  103) --> SEGMENTATION VIOLATION (SEG1)
      VA 104: 0x00000068 (decimal:  104) --> SEGMENTATION VIOLATION (SEG1)
      VA 105: 0x00000069 (decimal:  105) --> SEGMENTATION VIOLATION (SEG1)
      VA 106: 0x0000006a (decimal:  106) --> SEGMENTATION VIOLATION (SEG1)
      VA 107: 0x0000006b (decimal:  107) --> SEGMENTATION VIOLATION (SEG1)
      VA 108: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
      VA 109: 0x0000006d (decimal:  109) --> VALID in SEG1: 0x000001ed (decimal:  493)
      VA 110: 0x0000006e (decimal:  110) --> VALID in SEG1: 0x000001ee (decimal:  494)
      VA 111: 0x0000006f (decimal:  111) --> VALID in SEG1: 0x000001ef (decimal:  495)
      VA 112: 0x00000070 (decimal:  112) --> VALID in SEG1: 0x000001f0 (decimal:  496)
      VA 113: 0x00000071 (decimal:  113) --> VALID in SEG1: 0x000001f1 (decimal:  497)
      VA 114: 0x00000072 (decimal:  114) --> VALID in SEG1: 0x000001f2 (decimal:  498)
      VA 115: 0x00000073 (decimal:  115) --> VALID in SEG1: 0x000001f3 (decimal:  499)
      VA 116: 0x00000074 (decimal:  116) --> VALID in SEG1: 0x000001f4 (decimal:  500)
      VA 117: 0x00000075 (decimal:  117) --> VALID in SEG1: 0x000001f5 (decimal:  501)
      VA 118: 0x00000076 (decimal:  118) --> VALID in SEG1: 0x000001f6 (decimal:  502)
      VA 119: 0x00000077 (decimal:  119) --> VALID in SEG1: 0x000001f7 (decimal:  503)
      VA 120: 0x00000078 (decimal:  120) --> VALID in SEG1: 0x000001f8 (decimal:  504)
      VA 121: 0x00000079 (decimal:  121) --> VALID in SEG1: 0x000001f9 (decimal:  505)
      VA 122: 0x0000007a (decimal:  122) --> VALID in SEG1: 0x000001fa (decimal:  506)
      VA 123: 0x0000007b (decimal:  123) --> VALID in SEG1: 0x000001fb (decimal:  507)
      VA 124: 0x0000007c (decimal:  124) --> VALID in SEG1: 0x000001fc (decimal:  508)
      VA 125: 0x0000007d (decimal:  125) --> VALID in SEG1: 0x000001fd (decimal:  509)
      VA 126: 0x0000007e (decimal:  126) --> VALID in SEG1: 0x000001fe (decimal:  510)
      VA 127: 0x0000007f (decimal:  127) --> VALID in SEG1: 0x000001ff (decimal:  511)
    Error: virtual address 128 cannot be generated in an address space of size 128
